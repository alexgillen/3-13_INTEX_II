// File: /backend/CineNiche.Auth/Services/StytchService.cs
using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.Extensions.Options;
using CineNiche.Auth.Configuration;

namespace CineNiche.Auth.Services
{
    public class StytchService : IStytchService
    {
        private readonly HttpClient _httpClient;
        private readonly StytchConfig _config;
        private readonly ITokenService _tokenService;
        
        public StytchService(
            HttpClient httpClient, 
            IOptions<StytchConfig> config,
            ITokenService tokenService)
        {
            _httpClient = httpClient;
            _config = config.Value;
            _tokenService = tokenService;
            
            // Configure the HttpClient with base URL and authentication
            _httpClient.BaseAddress = new Uri(_config.BaseUrl);
            
            // Set up Basic Authentication with project ID and secret
            var authToken = Convert.ToBase64String(Encoding.ASCII.GetBytes($"{_config.ProjectId}:{_config.Secret}"));
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", authToken);
        }
        
        public async Task<AuthResult> AuthenticateByEmailAsync(string email, string password)
        {
            try
            {
                var requestData = new
                {
                    email,
                    password
                };
                
                var content = new StringContent(JsonSerializer.Serialize(requestData), Encoding.UTF8, "application/json");
                var response = await _httpClient.PostAsync("passwords/authenticate", content);
                
                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var result = JsonSerializer.Deserialize<StytchAuthResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    
                    if (result != null)
                    {
                        return new AuthResult
                        {
                            Success = true,
                            UserId = result.UserId,
                            SessionId = result.SessionId,
                            Token = null // Token will be generated by controller using TokenService
                        };
                    }
                }
                
                return new AuthResult 
                { 
                    Success = false, 
                    Error = "Authentication failed" 
                };
            }
            catch (Exception ex)
            {
                return new AuthResult 
                { 
                    Success = false, 
                    Error = $"Authentication error: {ex.Message}" 
                };
            }
        }
        
        public async Task<AuthResult> AuthenticateByTokenAsync(string token)
        {
            try
            {
                var requestData = new
                {
                    token
                };
                
                var content = new StringContent(JsonSerializer.Serialize(requestData), Encoding.UTF8, "application/json");
                var response = await _httpClient.PostAsync("magic_links/authenticate", content);
                
                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var result = JsonSerializer.Deserialize<StytchAuthResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    
                    if (result != null)
                    {
                        return new AuthResult
                        {
                            Success = true,
                            UserId = result.UserId,
                            SessionId = result.SessionId,
                            Token = null // Token will be generated by controller using TokenService
                        };
                    }
                }
                
                return new AuthResult 
                { 
                    Success = false, 
                    Error = "Token authentication failed" 
                };
            }
            catch (Exception ex)
            {
                return new AuthResult 
                { 
                    Success = false, 
                    Error = $"Token authentication error: {ex.Message}" 
                };
            }
        }
        
        public async Task<UserResult> CreateUserAsync(string email, string password, string firstName, string lastName)
        {
            try
            {
                var requestData = new
                {
                    email,
                    password,
                    name = new
                    {
                        first_name = firstName,
                        last_name = lastName
                    }
                };
                
                var content = new StringContent(JsonSerializer.Serialize(requestData), Encoding.UTF8, "application/json");
                var response = await _httpClient.PostAsync("users", content);
                
                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var result = JsonSerializer.Deserialize<StytchUserResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    
                    if (result != null)
                    {
                        return new UserResult
                        {
                            Success = true,
                            UserId = result.UserId,
                            Email = email,
                            FirstName = firstName,
                            LastName = lastName,
                            EmailVerified = false
                        };
                    }
                }
                
                return new UserResult 
                { 
                    Success = false, 
                    Error = "User creation failed" 
                };
            }
            catch (Exception ex)
            {
                return new UserResult 
                { 
                    Success = false, 
                    Error = $"User creation error: {ex.Message}" 
                };
            }
        }
        
        public async Task<UserResult> GetUserByIdAsync(string userId)
        {
            try
            {
                var response = await _httpClient.GetAsync($"users/{userId}");
                
                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var result = JsonSerializer.Deserialize<StytchUserResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    
                    if (result != null)
                    {
                        return new UserResult
                        {
                            Success = true,
                            UserId = result.UserId,
                            Email = result.Email,
                            FirstName = result.Name?.FirstName,
                            LastName = result.Name?.LastName,
                            EmailVerified = result.EmailVerified
                        };
                    }
                }
                
                return new UserResult 
                { 
                    Success = false, 
                    Error = "User not found" 
                };
            }
            catch (Exception ex)
            {
                return new UserResult 
                { 
                    Success = false, 
                    Error = $"Get user error: {ex.Message}" 
                };
            }
        }
        
        public async Task<UserResult> GetUserByEmailAsync(string email)
        {
            try
            {
                var requestData = new
                {
                    email
                };
                
                var content = new StringContent(JsonSerializer.Serialize(requestData), Encoding.UTF8, "application/json");
                var response = await _httpClient.PostAsync("users/search", content);
                
                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var result = JsonSerializer.Deserialize<StytchUserSearchResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    
                    if (result != null && result.Users.Count > 0)
                    {
                        var user = result.Users[0];
                        return new UserResult
                        {
                            Success = true,
                            UserId = user.UserId,
                            Email = user.Email,
                            FirstName = user.Name?.FirstName,
                            LastName = user.Name?.LastName,
                            EmailVerified = user.EmailVerified
                        };
                    }
                }
                
                return new UserResult 
                { 
                    Success = false, 
                    Error = "User not found" 
                };
            }
            catch (Exception ex)
            {
                return new UserResult 
                { 
                    Success = false, 
                    Error = $"Search user error: {ex.Message}" 
                };
            }
        }
        
        public async Task<EmailResult> SendPasswordResetEmailAsync(string email)
        {
            try
            {
                var requestData = new
                {
                    email,
                    login_redirect_url = _config.LoginRedirectUrl
                };
                
                var content = new StringContent(JsonSerializer.Serialize(requestData), Encoding.UTF8, "application/json");
                var response = await _httpClient.PostAsync("passwords/email/reset/start", content);
                
                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var result = JsonSerializer.Deserialize<StytchEmailResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    
                    if (result != null)
                    {
                        return new EmailResult
                        {
                            Success = true,
                            Email = email,
                            RequestId = result.RequestId
                        };
                    }
                }
                
                return new EmailResult 
                { 
                    Success = false, 
                    Error = "Failed to send password reset email" 
                };
            }
            catch (Exception ex)
            {
                return new EmailResult 
                { 
                    Success = false, 
                    Error = $"Password reset error: {ex.Message}" 
                };
            }
        }
        
        public async Task<EmailResult> SendEmailVerificationAsync(string email)
        {
            try
            {
                var requestData = new
                {
                    email,
                    login_redirect_url = _config.LoginRedirectUrl
                };
                
                var content = new StringContent(JsonSerializer.Serialize(requestData), Encoding.UTF8, "application/json");
                var response = await _httpClient.PostAsync("emails/verification/start", content);
                
                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var result = JsonSerializer.Deserialize<StytchEmailResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    
                    if (result != null)
                    {
                        return new EmailResult
                        {
                            Success = true,
                            Email = email,
                            RequestId = result.RequestId
                        };
                    }
                }
                
                return new EmailResult 
                { 
                    Success = false, 
                    Error = "Failed to send verification email" 
                };
            }
            catch (Exception ex)
            {
                return new EmailResult 
                { 
                    Success = false, 
                    Error = $"Email verification error: {ex.Message}" 
                };
            }
        }
        
        public async Task<AuthResult> VerifyEmailAsync(string token)
        {
            try
            {
                var requestData = new
                {
                    token
                };
                
                var content = new StringContent(JsonSerializer.Serialize(requestData), Encoding.UTF8, "application/json");
                var response = await _httpClient.PostAsync("emails/verification/confirm", content);
                
                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var result = JsonSerializer.Deserialize<StytchAuthResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    
                    if (result != null)
                    {
                        return new AuthResult
                        {
                            Success = true,
                            UserId = result.UserId,
                            SessionId = result.SessionId,
                            Token = null // Token will be generated by controller using TokenService
                        };
                    }
                }
                
                return new AuthResult 
                { 
                    Success = false, 
                    Error = "Email verification failed" 
                };
            }
            catch (Exception ex)
            {
                return new AuthResult 
                { 
                    Success = false, 
                    Error = $"Email verification error: {ex.Message}" 
                };
            }
        }
        
        public async Task<AuthResult> ResetPasswordAsync(string token, string newPassword)
        {
            try
            {
                var requestData = new
                {
                    token,
                    password = newPassword
                };
                
                var content = new StringContent(JsonSerializer.Serialize(requestData), Encoding.UTF8, "application/json");
                var response = await _httpClient.PostAsync("passwords/reset", content);
                
                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var result = JsonSerializer.Deserialize<StytchAuthResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    
                    if (result != null)
                    {
                        return new AuthResult
                        {
                            Success = true,
                            UserId = result.UserId,
                            SessionId = result.SessionId,
                            Token = null // Token will be generated by controller using TokenService
                        };
                    }
                }
                
                return new AuthResult 
                { 
                    Success = false, 
                    Error = "Password reset failed" 
                };
            }
            catch (Exception ex)
            {
                return new AuthResult 
                { 
                    Success = false, 
                    Error = $"Password reset error: {ex.Message}" 
                };
            }
        }
        
        public async Task<bool> RevokeSessionAsync(string sessionId)
        {
            try
            {
                var requestData = new
                {
                    session_id = sessionId
                };
                
                var content = new StringContent(JsonSerializer.Serialize(requestData), Encoding.UTF8, "application/json");
                var response = await _httpClient.PostAsync("sessions/revoke", content);
                
                return response.IsSuccessStatusCode;
            }
            catch
            {
                return false;
            }
        }
        
        public async Task<SessionResult> GetSessionAsync(string sessionId)
        {
            try
            {
                var response = await _httpClient.GetAsync($"sessions/{sessionId}");
                
                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var result = JsonSerializer.Deserialize<StytchSessionResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    
                    if (result != null)
                    {
                        return new SessionResult
                        {
                            Success = true,
                            SessionId = result.SessionId,
                            UserId = result.UserId,
                            Active = result.Status == "active"
                        };
                    }
                }
                
                return new SessionResult 
                { 
                    Success = false, 
                    Error = "Session not found or invalid" 
                };
            }
            catch (Exception ex)
            {
                return new SessionResult 
                { 
                    Success = false, 
                    Error = $"Session retrieval error: {ex.Message}" 
                };
            }
        }
        
        // Private response classes to deserialize Stytch API responses
        private class StytchAuthResponse
        {
            public string UserId { get; set; }
            public string SessionId { get; set; }
            public bool EmailVerified { get; set; }
        }
        
        private class StytchUserResponse
        {
            public string UserId { get; set; }
            public string Email { get; set; }
            public bool EmailVerified { get; set; }
            public NameInfo Name { get; set; }
            
            public class NameInfo
            {
                public string FirstName { get; set; }
                public string LastName { get; set; }
            }
        }
        
        private class StytchUserSearchResponse
        {
            public List<StytchUserResponse> Users { get; set; } = new List<StytchUserResponse>();
        }
        
        private class StytchEmailResponse
        {
            public string RequestId { get; set; }
            public string Email { get; set; }
        }
        
        private class StytchSessionResponse
        {
            public string SessionId { get; set; }
            public string UserId { get; set; }
            public string Status { get; set; }
        }
    }
}